---

- include: install_LAMPy_stack.yml

- name: deploy_django_project_force.yml
  hosts: all
  serial: 5 #concurent processing nodes

  vars:
    git_repo_url: https://hung.ha_citigo:Wanderlust_@git.assembla.com/projectforce.git
    gitrepo_version: origin/dev-old-ansible
    assembla_password: Wanderlust_
    httpd_port: 80
    database_name: prodbinstance
    project_name: projectforce
    project_config: config_develop.py
    makemigrations_modules: portfolios project
    pip_requirements: pip_requirements.txt
    project_httpd_conf: projectforcehq/httpd_develop.conf
    test_apps: SKIP
    mysql_root_password: dev0108
    mysql_username: projectf_dev 
    mysql_user_password: dev0108
    collectstatic: False
    media_dir_path: /var/www/projectforce/media
  vars_files:
    - ansible/vars.yml

  tasks:
#    - include: tasks/install_redis_and_python_driver.yml
#    - include: tasks/install_jython.yml
#    - include: tasks/install_phantomjs.yml
#    - include: tasks/install_wkhtmltopdf.yml
#    - include: tasks/install_rabbitmq.yml

    - stat: path=/var/www/{{ project_name }}/.git/
      register: git

    - name: clone repo
      git: repo={{ git_repo_url }} dest=/var/www/{{ project_name }} clone=yes update=yes
      when: not git.stat.exists
      sudo: yes

#    - name: fetch repo
#      shell: echo "{{assembla_password}}" | sudo git fetch --all
#      args:
#        chdir: /var/www/{{ project_name }}
#      no_log: True

    - name: update repo to specific version in {{ gitrepo_version }}
      command: sudo git reset --hard {{ gitrepo_version }}
      args:
        chdir: /var/www/{{ project_name }}

    - name: overide config.py
      command: sudo cp -f {{ project_config }} config.py
      args:
        chdir: /var/www/{{ project_name }}
      when: project_config != "config.py"

    - name: create mysql_db user
      mysql_user: 
        login_user=root 
        login_password={{ mysql_root_password }} 
        name={{ mysql_username }} 
        password={{ mysql_user_password }} 
        priv=*.*:ALL state=present

    - name: create database
      mysql_db: 
        name={{ database_name }} 
        encoding=utf8 
        state=present 
        login_user={{mysql_username}} 
        login_password={{mysql_user_password}}
      ignore_errors: yes

    - include: tasks/link_project.yml

#    - name: install project dependency native package with yum
#      yum: name={{ item }}
#      sudo: yes
#      with_items:
#        - ImageMagick-devel

    - name: install project pip requirements
      pip: requirements={{ pip_requirements }}
      sudo: yes
      args:
        chdir: /var/www/{{ project_name }}

    - name: django manage.py migrate
      command: sudo python manage.py migrate
      args:
        chdir: /var/www/{{ project_name }}

    - name: django manage.py test
      django_manage: command=test {{test_apps}} app_path=/var/www/{{ project_name }}
      when: test_apps != "SKIP"

    - name: chmod log dir
      file: 
        path=/var/www/{{ project_name }}/log 
        state=directory 
        mode=0777 
        owner=apache 
        group=apache
      sudo: yes

    - name: chmod log file
      file:  
        path=/var/www/{{ project_name }}/log/projectforce.log 
        mode=0777 
        owner=apache 
        group=apache
      sudo: yes

    # Config apache
    - name: overide httpd.conf
      command: sudo cp -f {{ project_httpd_conf }} /etc/httpd/conf/httpd.conf
      args:
        chdir: /var/www/{{ project_name }}

    - name: restart httpd service
      service: name=httpd state=restarted
      sudo: yes

    - name: create media dir
      file: path={{ media_dir_path }} state=directory mode=0777
      when: collectstatic == True
      sudo: yes

    - name: create static dir
      file: path=/var/www/{{ project_name }}/static state=directory mode=0777
      when: collectstatic == True
      sudo: yes

    - name: django manage.py collectstatic
      command: sudo python manage.py collectstatic --noinput -c
      args:
        chdir: /var/www/{{ project_name }}
      when: collectstatic == True

    - name: copy default admin user json fixture
      copy: src=files/default_admin_user.json dest=/var/www/{{ project_name }}/default_admin_user.json
      sudo: yes

    - name: django load superuser (admin/admin)
      command: sudo python /var/www/{{ project_name }}/manage.py loaddata /var/www/{{ project_name }}/default_admin_user.json
      ignore_errors: yes
      sudo: yes

    - name: remove default admin fixture
      file: path=/var/www/{{ project_name }}/default_admin_user.json state=absent

    - name: start celery worker with beat enable
      command: sudo celery multi start pfhqworker -A project -B --pidfile="/var/run/celery/%n.pid" --logfile="/var/run/celery/%n.log" --loglevel=INFO;
      args:
        chdir: /var/www/{{ project_name }}
