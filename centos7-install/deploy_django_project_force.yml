---

- include: install_LAMPy_stack.yml
- include: install_4DB_mariadb_mongodb_redis_memcached.yml

- name: deploy_django_project_force.yml
  hosts: all
  serial: 5 #concurent processing nodes

  vars:
    git_repo_url: https://tranvietanh1991:assembla_password@git.assembla.com/projectforce.git
    gitrepo_version: origin/master
    assembla_password: fill_me_in
    httpd_port: 80
    database_name: projectf_dev
    project_name: projectforce
    project_config: config_develop.py
    makemigrations_modules: portfolios project
    pip_requirements: pip_requirements.txt
    project_httpd_conf: httpd_develop.conf
    test_apps: SKIP
    collectstatic: False
    mysql_root_password: "dev0000"
    media_dir_path: /var/www/projectforce/media
  vars_files:
    - ansible/vars.yml

  tasks:
    - include: tasks/install_jython.yml
    - include: tasks/install_phantomjs.yml
    - include: tasks/install_wkhtmltopdf.yml
    - include: tasks/link_project.yml

    - name: clone repo
      git: repo={{ git_repo_url }}
      sudo: yes
      args:
        dest: /var/www/{{ project_name }}
        update: no
      no_log: True

    - name: fetch repo
      shell: echo "{{assembla_password}}" | sudo git fetch --all
      args:
        chdir: /var/www/{{ project_name }}
      no_log: True

    - name: update repo to specific version in {{ gitrepo_version }}
      command: sudo git reset --hard {{ gitrepo_version }}
      args:
        chdir: /var/www/{{ project_name }}

    - name: overide config.py
      command: sudo cp -f {{ project_config }} config.py
      args:
        chdir: /var/www/{{ project_name }}
      when: project_config != "config.py"

    - name: create database
      mysql_db: name={{ database_name }} encoding=utf8 state=present login_user=root login_password={{mysql_root_password}}
      sudo: yes
      ignore_errors: yes

    - name: create log dir
      command: sudo mkdir /var/www/{{ project_name }}/log
      args:
        creates: /var/www/{{ project_name }}/log

    - name: install project dependency native package with yum
      yum: name={{ item }}
      sudo: yes
      with_items:
        - ImageMagick-devel

    - name: install project pip requirements
      pip: requirements={{ pip_requirements }}
      sudo: yes
      args:
        chdir: /var/www/{{ project_name }}

    - name: django manage.py makemigrations
      command: sudo python manage.py makemigrations {{ makemigrations_modules }}
      args:
        chdir: /var/www/{{ project_name }}

    - name: django manage.py migrate
      command: sudo python manage.py migrate
      args:
        chdir: /var/www/{{ project_name }}

    - name: django manage.py test
      django_manage: command=test {{test_apps}} app_path=/var/www/{{ project_name }}
      when: test_apps != "SKIP"

    - name: chmod log dir
      file:  /var/www/{{ project_name }}/log state=directory mode=0777

    # Config apache
    - name: overide httpd.conf
      command: sudo cp -f {{ project_httpd_conf }} /etc/httpd/conf/httpd.conf
      args:
        chdir: /var/www/{{ project_name }}

    - name: restart httpd service
      service: name=httpd state=restarted
      sudo: yes

    - name: create media dir
      file: path={{ media_dir_path }} state=directory mode=0777
      when: collectstatic == True

    - name: create static dir
      file: path=/var/www/{{ project_name }}/static state=directory mode=0777
      when: collectstatic == True

    - name: django manage.py collectstatic
      command: sudo python manage.py collectstatic --noinput -c
      args:
        chdir: /var/www/{{ project_name }}
      when: collectstatic == True

    - name: copy default admin user json fixture
      copy: src=files/default_admin_user.json dest=/var/www/{{ project_name }}/default_admin_user.json
      sudo: yes

    - name: django load superuser (admin/admin)
      django_manage: command=loaddata app_path=/var/www/{{ project_name }} fixtures=/var/www/{{ project_name }}/default_admin_user.json
      ignore_errors: yes

    - name: remove default admin fixture
      command: sudo rm -f /var/www/{{ project_name }}/default_admin_user.json

    - name: start celery worker with beat enable
      command: sudo celery multi start pfhqworker -A project -B --pidfile="/var/run/celery/%n.pid" --logfile="/var/run/celery/%n.log" --loglevel=INFO;
      args:
        chdir: /var/www/{{ project_name }}
